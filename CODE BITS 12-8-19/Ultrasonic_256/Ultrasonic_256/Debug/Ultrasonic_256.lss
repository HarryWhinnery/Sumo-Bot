
Ultrasonic_256.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00802000  00802000  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003df9  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003316  00000000  00000000  00004289  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e8  00000000  00000000  0000759f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00007b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002bab  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bd  00000000  00000000  0000a797  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000a854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
   c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ac:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_43>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
  fc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 100:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 104:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 108:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 10c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 110:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 114:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 118:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 11c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 120:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 124:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 128:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 12c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 130:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 134:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 138:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 13c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 140:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 144:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 148:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 14c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 150:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 154:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 158:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 15c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 160:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 164:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 168:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 16c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 170:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 174:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 178:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 17c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 180:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 184:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 188:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 18c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 190:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 194:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 198:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 19c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ac:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1b8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1bc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1c8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1cc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1d8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1dc:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1e8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1ec:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
 1f8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_clear_bss>:
 20c:	20 e2       	ldi	r18, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
 214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
 216:	a7 30       	cpi	r26, 0x07	; 7
 218:	b2 07       	cpc	r27, r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
 21c:	0e 94 27 01 	call	0x24e	; 0x24e <main>
 220:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

00000224 <__bad_interrupt>:
 224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <_Z21setUp16MhzExternalOscv>:
uint16_t start_echo;

void setUp16MhzExternalOsc()
{
	//16MHz external crystal
	OSC_XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 228:	8b ec       	ldi	r24, 0xCB	; 203
 22a:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//Enable external oscillator
	OSC_CTRL |= OSC_XOSCEN_bm;
 22e:	e0 e5       	ldi	r30, 0x50	; 80
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 60       	ori	r24, 0x08	; 8
 236:	80 83       	st	Z, r24
	//Wait for clock stabilization
	while(!(OSC_STATUS & OSC_XOSCRDY_bm));
 238:	e1 e5       	ldi	r30, 0x51	; 81
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	83 ff       	sbrs	r24, 3
 240:	fd cf       	rjmp	.-6      	; 0x23c <_Z21setUp16MhzExternalOscv+0x14>
	// Selects clock system as external clock
	// through change protection mechanism
	CCP = CCP_IOREG_gc;
 242:	88 ed       	ldi	r24, 0xD8	; 216
 244:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_XOSC_gc;
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 24c:	08 95       	ret

0000024e <main>:


int main(void)
{
    
	setUp16MhzExternalOsc();
 24e:	0e 94 14 01 	call	0x228	; 0x228 <_Z21setUp16MhzExternalOscv>
	
	PORTE.DIR |= (1<<0);		//Set PE0 out
 252:	e0 e8       	ldi	r30, 0x80	; 128
 254:	f6 e0       	ldi	r31, 0x06	; 6
 256:	80 81       	ld	r24, Z
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	80 83       	st	Z, r24
	PORTE.DIR &= ~(1<<1);	    //Set PE1 in
 25c:	80 81       	ld	r24, Z
 25e:	8d 7f       	andi	r24, 0xFD	; 253
 260:	80 83       	st	Z, r24
	PORTE.DIR |= (1<<2);			//Set PE2 out
 262:	80 81       	ld	r24, Z
 264:	84 60       	ori	r24, 0x04	; 4
 266:	80 83       	st	Z, r24

	PORTE.PIN1CTRL = PORT_ISC_BOTHEDGES_gc; //ISR will trigger whenever PC1 rises or falls
 268:	11 8a       	std	Z+17, r1	; 0x11
	PORTE.INT0MASK = PIN1_bm;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	82 87       	std	Z+10, r24	; 0x0a
	PORTE.INTCTRL = PORT_INT0LVL_LO_gc;		//Set PE1 interrupt priority to low
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	81 87       	std	Z+9, r24	; 0x09
	TCE1.PER = 0xFFFF;
 272:	e0 e4       	ldi	r30, 0x40	; 64
 274:	fa e0       	ldi	r31, 0x0A	; 10
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	9f ef       	ldi	r25, 0xFF	; 255
 27a:	86 a3       	std	Z+38, r24	; 0x26
 27c:	97 a3       	std	Z+39, r25	; 0x27
	TCE1.CTRLA = ~TC1_CLKSEL_gm | TC_CLKSEL_DIV1_gc;
 27e:	81 ef       	ldi	r24, 0xF1	; 241
 280:	80 83       	st	Z, r24
	PMIC_CTRL |= PMIC_LOLVLEN_bm;
 282:	e2 ea       	ldi	r30, 0xA2	; 162
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	80 83       	st	Z, r24
	sei();	
 28c:	78 94       	sei
	
	
	while (1)
	{
		_delay_us(10);		
		PORTE.OUT &= ~(1<<0);		//PC0 Low
 28e:	e0 e8       	ldi	r30, 0x80	; 128
 290:	f6 e0       	ldi	r31, 0x06	; 6
		_delay_us(10000);
		distance = echo_width/16000 * 13504; //Distance in inches
 292:	40 ec       	ldi	r20, 0xC0	; 192
 294:	54 e3       	ldi	r21, 0x34	; 52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	23 e0       	ldi	r18, 0x03	; 3
 298:	2a 95       	dec	r18
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x4a>
 29c:	00 00       	nop
	
	
	while (1)
	{
		_delay_us(10);		
		PORTE.OUT &= ~(1<<0);		//PC0 Low
 29e:	84 81       	ldd	r24, Z+4	; 0x04
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	84 83       	std	Z+4, r24	; 0x04
 2a4:	83 ec       	ldi	r24, 0xC3	; 195
 2a6:	99 e0       	ldi	r25, 0x09	; 9
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x5a>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x60>
 2ae:	00 00       	nop
		_delay_us(10000);
		distance = echo_width/16000 * 13504; //Distance in inches
 2b0:	20 91 04 20 	lds	r18, 0x2004	; 0x802004 <echo_width>
 2b4:	30 91 05 20 	lds	r19, 0x2005	; 0x802005 <echo_width+0x1>
 2b8:	22 0f       	add	r18, r18
 2ba:	23 2f       	mov	r18, r19
 2bc:	22 1f       	adc	r18, r18
 2be:	33 0b       	sbc	r19, r19
 2c0:	31 95       	neg	r19
 2c2:	ad e0       	ldi	r26, 0x0D	; 13
 2c4:	b2 e0       	ldi	r27, 0x02	; 2
 2c6:	0e 94 ad 01 	call	0x35a	; 0x35a <__umulhisi3>
 2ca:	9c 01       	movw	r18, r24
 2cc:	24 9f       	mul	r18, r20
 2ce:	c0 01       	movw	r24, r0
 2d0:	25 9f       	mul	r18, r21
 2d2:	90 0d       	add	r25, r0
 2d4:	34 9f       	mul	r19, r20
 2d6:	90 0d       	add	r25, r0
 2d8:	11 24       	eor	r1, r1
 2da:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <distance>
 2de:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <distance+0x1>
		if (distance < 2)
 2e2:	02 97       	sbiw	r24, 0x02	; 2
 2e4:	20 f4       	brcc	.+8      	; 0x2ee <main+0xa0>
		{
			PORTE.OUT |= (1<<2);
 2e6:	84 81       	ldd	r24, Z+4	; 0x04
 2e8:	84 60       	ori	r24, 0x04	; 4
 2ea:	84 83       	std	Z+4, r24	; 0x04
 2ec:	d4 cf       	rjmp	.-88     	; 0x296 <main+0x48>
		}
		else
		{
			PORTE.OUT &= ~(1<<2);
 2ee:	84 81       	ldd	r24, Z+4	; 0x04
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	84 83       	std	Z+4, r24	; 0x04
 2f4:	d0 cf       	rjmp	.-96     	; 0x296 <main+0x48>

000002f6 <__vector_43>:
}
	
	

ISR (PORTE_INT0_vect)    // Interrupt function
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
	if (rise_or_fall == 0)
 308:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <_ZL12rise_or_fall>
 30c:	81 11       	cpse	r24, r1
 30e:	0c c0       	rjmp	.+24     	; 0x328 <__vector_43+0x32>
	{
		//PORTE.OUT |= (1<<2);
		start_echo = TCE1.CNT;			//Set count register to zero for timing the pulse
 310:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <__TEXT_REGION_LENGTH__+0x700a60>
 314:	90 91 61 0a 	lds	r25, 0x0A61	; 0x800a61 <__TEXT_REGION_LENGTH__+0x700a61>
 318:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 31c:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		rise_or_fall = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <_ZL12rise_or_fall>
 326:	10 c0       	rjmp	.+32     	; 0x348 <__vector_43+0x52>
		
	}
	else
	{
		//PORTE.OUT &= ~(1<<2);
		echo_width = TCE1.CNT - start_echo;
 328:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <__TEXT_REGION_LENGTH__+0x700a60>
 32c:	90 91 61 0a 	lds	r25, 0x0A61	; 0x800a61 <__TEXT_REGION_LENGTH__+0x700a61>
 330:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 334:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 338:	82 1b       	sub	r24, r18
 33a:	93 0b       	sbc	r25, r19
 33c:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <echo_width>
 340:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <echo_width+0x1>
		rise_or_fall = 0;
 344:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <_ZL12rise_or_fall>
	}
	
	
}
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	3f 91       	pop	r19
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <__umulhisi3>:
 35a:	a2 9f       	mul	r26, r18
 35c:	b0 01       	movw	r22, r0
 35e:	b3 9f       	mul	r27, r19
 360:	c0 01       	movw	r24, r0
 362:	a3 9f       	mul	r26, r19
 364:	70 0d       	add	r23, r0
 366:	81 1d       	adc	r24, r1
 368:	11 24       	eor	r1, r1
 36a:	91 1d       	adc	r25, r1
 36c:	b2 9f       	mul	r27, r18
 36e:	70 0d       	add	r23, r0
 370:	81 1d       	adc	r24, r1
 372:	11 24       	eor	r1, r1
 374:	91 1d       	adc	r25, r1
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
